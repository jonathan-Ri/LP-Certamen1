# Generated from Gramatica.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,95,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,4,0,25,8,0,11,0,12,0,
        26,1,1,4,1,30,8,1,11,1,12,1,31,1,2,3,2,35,8,2,1,2,1,2,1,3,4,3,40,
        8,3,11,3,12,3,41,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,0,0,11,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,1,0,3,2,0,65,90,97,122,1,0,48,
        57,2,0,9,9,32,32,98,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,24,1,0,0,0,3,29,1,0,0,0,5,34,1,0,
        0,0,7,39,1,0,0,0,9,45,1,0,0,0,11,47,1,0,0,0,13,49,1,0,0,0,15,51,
        1,0,0,0,17,59,1,0,0,0,19,71,1,0,0,0,21,85,1,0,0,0,23,25,7,0,0,0,
        24,23,1,0,0,0,25,26,1,0,0,0,26,24,1,0,0,0,26,27,1,0,0,0,27,2,1,0,
        0,0,28,30,7,1,0,0,29,28,1,0,0,0,30,31,1,0,0,0,31,29,1,0,0,0,31,32,
        1,0,0,0,32,4,1,0,0,0,33,35,5,13,0,0,34,33,1,0,0,0,34,35,1,0,0,0,
        35,36,1,0,0,0,36,37,5,10,0,0,37,6,1,0,0,0,38,40,7,2,0,0,39,38,1,
        0,0,0,40,41,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,43,1,0,0,0,43,
        44,6,3,0,0,44,8,1,0,0,0,45,46,3,3,1,0,46,10,1,0,0,0,47,48,3,3,1,
        0,48,12,1,0,0,0,49,50,3,3,1,0,50,14,1,0,0,0,51,52,5,40,0,0,52,53,
        3,3,1,0,53,54,5,44,0,0,54,55,3,3,1,0,55,56,5,44,0,0,56,57,3,3,1,
        0,57,58,5,41,0,0,58,16,1,0,0,0,59,60,5,114,0,0,60,61,5,117,0,0,61,
        62,5,110,0,0,62,63,5,40,0,0,63,64,1,0,0,0,64,65,3,9,4,0,65,66,5,
        44,0,0,66,67,3,11,5,0,67,68,5,44,0,0,68,69,3,13,6,0,69,70,5,41,0,
        0,70,18,1,0,0,0,71,72,5,114,0,0,72,73,5,117,0,0,73,74,5,110,0,0,
        74,75,5,40,0,0,75,76,1,0,0,0,76,77,3,9,4,0,77,78,5,44,0,0,78,79,
        3,11,5,0,79,80,5,44,0,0,80,81,3,13,6,0,81,82,5,44,0,0,82,83,3,15,
        7,0,83,84,5,41,0,0,84,20,1,0,0,0,85,86,5,114,0,0,86,87,5,117,0,0,
        87,88,5,110,0,0,88,89,5,40,0,0,89,90,1,0,0,0,90,91,3,9,4,0,91,92,
        5,44,0,0,92,93,3,11,5,0,93,94,5,41,0,0,94,22,1,0,0,0,5,0,26,31,34,
        41,1,6,0,0
    ]

class GramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    INT = 2
    NEXLINE = 3
    WS = 4
    ESPACIO = 5
    CAPAS = 6
    ITERACIONES = 7
    PACIENTE0 = 8
    RUN = 9
    RUN2 = 10
    RUN3 = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "NEXLINE", "WS", "ESPACIO", "CAPAS", "ITERACIONES", 
            "PACIENTE0", "RUN", "RUN2", "RUN3" ]

    ruleNames = [ "ID", "INT", "NEXLINE", "WS", "ESPACIO", "CAPAS", "ITERACIONES", 
                  "PACIENTE0", "RUN", "RUN2", "RUN3" ]

    grammarFileName = "Gramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


